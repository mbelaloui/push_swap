/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main-2.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mbelalou <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/05/21 16:58:46 by mbelalou          #+#    #+#             */
/*   Updated: 2018/05/21 17:16:57 by mbelalou         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../src/inc/push_swap.h"

void		ft_put_int_tab(int *tab, size_t size)
{
	size_t pt;

	size /= sizeof(intmax_t);
	pt = 0;
	while (pt < size)
		ft_printf("%d ", tab[pt++]);
	ft_printf("\n");
}

void	ft_swap_int(intmax_t *a, intmax_t *b)
{
	intmax_t temp;

	temp = *b;
	*b = *a;
	*a = temp;
}

void	ft_bubble_sort_int_list(t_int_list **list)
{
	t_int_list *pt_i;
	t_int_list *pt_j;

	pt_i = *list;
	while (pt_i)
	{
		pt_j = pt_i;
		while (pt_j)
		{
			if (pt_i->data > pt_j->data)
				ft_swap_int(&pt_i->data, &pt_j->data);
			pt_j = pt_j->next;
		}
		pt_i = pt_i->next;
	}
}

void	ft_bubble_sort_tab(intmax_t *tab, size_t size)
{
	size_t i;
	size_t j;

	i = 0;
	size /= sizeof(intmax_t);
	while (i < size)
	{
		j = i;
		while (j < size)
		{
			if (tab[i] > tab[j])
				ft_swap_int(&tab[i], &tab[j]);
			j++;
		}
		i++;
	}
}

BOOL	ft_add_elem_int_list(int index, intmax_t nbr, t_int_list **list)
{
	int			size;
	int			cp;
	t_int_list	*temp;
	t_int_list	*head;

	head = *list;
	if (index == 0)
	{
		ft_add_bgn_int_list(nbr, list);
		return (T);
	}
	size = ft_size_int_list(*list);
	if (index > size)
		return (F);
	cp = -1;
	while (++cp < index)
	{
		temp = (*list);
		(*list) = (*list)->next;
	}
	temp->next = ft_new_int_list(nbr);
	(temp->next)->next = *list;
	*list = head;
	return (T);
}

BOOL	ft_dell_index_int_list(int index, t_int_list **list)
{
	int			cp;
	t_int_list	*pt;
	t_int_list	*pt_save;

	if (!*list || index < 0)// || index > size)
		return (F);
	pt_save = NULL;
	pt = *list;
	cp = 0;
	while (pt && cp < index)
		pt = pt->next;
	if (!pt)
		return (F);
	pt_save->next = pt->next;
	free(pt);
	pt = pt_save->next;
	return (T);
}

BOOL	ft_dell_elem_int_list(intmax_t nbr, t_int_list**list)
{
	t_int_list	*pt;
	t_int_list	*pt_save;

	if (!*list)
		return (F);
	pt_save = NULL;
	pt = *list;
	while (pt)
	{
		if (pt->data == nbr)
		{
			pt_save->next = pt->next;
			free(pt);
			pt = pt_save->next;
		}
		else
		{
			pt_save = pt;
			pt = pt->next;
		}
	}
	return (T);
}


t_int_list		*ft_tab_to_int_list(intmax_t *tab, size_t size)
{
	t_int_list	*list;
	size_t		pt;

	list = NULL;
	size /= sizeof(intmax_t);
	pt = 0;
	while (pt < size)
		ft_add_end_int_list(tab[pt++], &list);
	return (list);
}

int			main(void)
{
	intmax_t tab[] = {5,9,8,7,6,5,4,3,2,1,0,-1,-2,-3, 5};
	t_int_list *list;

	//	ft_put_int_list(list);
	/*	ft_put_int_tab(tab, sizeof(tab));
		ft_bubble_sort_tab(tab, sizeof (tab));
		ft_put_int_tab(tab, sizeof(tab));
		*/
	list = NULL;
	list = ft_tab_to_int_list(tab, sizeof(tab));
	ft_put_int_list(list);
	ft_bubble_sort_int_list(&list);
	ft_put_int_list(list);

	ft_dell_elem_int_list(5, &list);
	ft_put_int_list(list);

	ft_printf("index = 0 -- %d\n", ft_dell_index_int_list(0, &list));
	ft_printf("index = -1 -- %d\n", ft_dell_index_int_list(-1, &list));
	ft_printf("index = 20 -- %d\n", ft_dell_index_int_list(20, &list));
	ft_printf("index = 2 -- %d\n", ft_dell_index_int_list(2, &list));
	ft_printf("index = 8 -- %d\n", ft_dell_index_int_list(8, &list));

	ft_clear_int_list(&list);
	/*	t_int_list *list;

		list = NULL;
		ft_put_int_list(list);
	ft_put_int_list(list);

		ft_printf("index = 0 -- %d\n",ft_add_elem_int_list(0, 2, &list));
		ft_put_int_list(list);

		ft_printf("index = 1 -- %d\n",ft_add_elem_int_list(1, 3, &list));
		ft_put_int_list(list);

		ft_printf("index = 0 -- %d\n",ft_add_elem_int_list(0, 4, &list));
		ft_put_int_list(list);

		ft_printf("index = 0 -- %d\n",ft_add_elem_int_list(0, 7, &list));
		ft_put_int_list(list);

		ft_printf("index = 0 -- %d\n",ft_add_elem_int_list(4, 9, &list));
		ft_put_int_list(list);
		*/
	return (0);
}
